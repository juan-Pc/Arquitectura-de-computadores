
juan carlos patiño hernandez
1. Describa la Taxonomía de Flynn.

-SISD (SINGLE INSTRUCTION SINGLE DATA): microprocesadores
-SIMD (SINGLE INSTRUCTION MULTIPLE DATA): GPU
-MIMD (MULTIPLE INSTRUCTION MULTIPLE DATA): sistemas aéreos
-MISD(MULTIPLE INSTRUCTION SINGLE DATA): sistemas distribuidos

2. Diga cuales son los 4 principios de diseño.

1-La simplicidad favorece la regularidad
2-Entre más pequeño es más rápido
3-Hacer el caso común más rápido
4-Buenos diseños demandan grandes compromisos

3. Explique los tres formatos de instrucciones principales existentes en la arquitectura SPARCV8.

-FORMATO #1 Lo utilizan las instrucciones de CALL
           OP    disp30

-FORMATO #2 Lo utilizan las instrucciones SETHI y BRANCH (Bicc,FBfcc,CBcc)
          OP  RD  OP2   imm22
          OP  a   COND  OP2    disp22
 
 -FORMATO #3 Lo utilizan las instrucciones memory instructions,arithmetic.logical,shnct and remaining
          OP  RD  OP3   RS1  i   UNSUED/ZERO  RS2
          OP  RD  OP3   RS1  i   UNSUED/ZERO  SHNCT       
 
4. Explique cómo inicializar un valor grande, que ocupe más de 13 bits, en la arquitectura SPARCV8.

-Se inicializa con la instrucción SETHI,la cual permite almacenar hasta 22 bits

5. Como puedo reescribir la instrucción (OR y SUBcc) cuando inicializo y  comparo 2 registros.

-Se puede reescribir con las instrucciones sintéticas MOV para OR y CMP  para SUBcc.

6. Implemente en lenguaje de bajo nivel y lenguaje de maquina el siguiente programa.
7. a.               LENGUAJE DE BAJO NIVEL
int main(){
int a = 8;          MOV 8 , %L0
int c = 33;         MOV 33, %L2
int b = -16800;     SETHI -17,%L1   
                    OR %L1,608,%L1
if((a+b)<=b*32){    ADD %L0,%L1,%L3
                    SLL %L1,32,%L4
                    CMP %L3,%L4
                    BG a SALTO1
c=a+(b*2);          SLL %L1,2,%L6
                    ADD %L0,%L6,%L2
                    BA a EXIT
}                   SALTO1
else {return b;     MOV %L1,%O0
}                   EXIT
return a+c;         ADD %L0,%L2,%O1
}

LENGUAJE DE MÁQUINA

DIRECCIONES	OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0000	        10	10000	000010	00000	1  	  0000000001000	
	        OP	RD	OP2	Imm22			
OX0004	        00	10001	100	1111111111111111101111			
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0008	        10	10001	00010	10001	1	0001001100000	
OX000C	        10	10010	000100	10010	1	0000000100001	
OX0010	        10	10011	000000	10000	0	00000000	10001
OX0014	        10	10100	100101	10001	1	00000000	100000
OX0018	        10	10010	010100	00000	0	00000000	10100
	        OP	a	cond	OP2	disp22		
OX001C	        00	1	1010	010	0000000000000000000100		
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0020	        10	10110	100101	10001	1	00000000	00010
	        OP	a	cond	OP2	disp22		
OX0024	        00	1	1000	010	0000000000000000000010		
	        OP	RD	OP3	RS1	i	Unusued/zero 	SHCNT Ó RS2
OX0028	        10	01000	100101	00000	0	00000000	10000
OX002C	        10	01001	000000	10000	0	00000000	01001



b.
int main(){             LENGUAJE DE BAJO NIVEL
int a = 8;              MOV 8,%L0
int b = -10;            MOV -10,%L1
int c = 3;              MOV 3,%L2
        
if(a!=b){               CMP %L0,%L1
                        BE a SALTO1
return c/8;             SRL %L2,8,%L2
                        MOV %L2,%O0
}                       BA a EXIT
else{                   SALTO1
return b;               MOV %L1,%O1                    
}                       EXIT
                        NOP
}
LENGUAJE DE MÁQUINA

DIRECCIONES	OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0000	        10	10000	000010	00000	1	0000000001000	
OX0004	        10	10001	000010	10001	1	0000000010110	
OX0008	        10	10010	000100	00000	1	0000000000011	
OX000C	        10	10000	100101	00000	0	00000000	10001
	        OP	a	cond	OP2	disp22		
OX0010	        00	1	0001	010	0000000000000000000100		
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2/SHCNT
OX0014          10	10110	100101	10001	1	00000000	00010
OX0018	        10	10010	100100	10010	1	00000000	01000
	        OP	a	cond	OP2	disp22		
OX001C          00	1	1000	010	0000000000000000000010		
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0020	        10	01001	000010	00000	0	00000000	10001
                OP	RD	OP2	Imm22			
OX0024          00	00000	100	0000000000000000000000			




c.
int main(){            LENGUAJE DE BAJO NIVEL
int a = -21180;        SETHI -21,%L0
                       OR %L0,324,%L0
return a;              MOV %L0,%O0
}

LENGUAJE DE MÁQUINA

DIRECCIONES	OP	RD	OP2	Imm22			
OX0000	        00	10000	100	11111111111111111101011			
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0004	        10	10000	00010	10000	1	0000101000100	
OX0008	        10	1000	000100	00000	0	00000000	10000


d. 
int main(){                LENGUAJE DE BAJO NIVEL
int a = 6;                 MOV 6,%L0
int b=4;                   MOV 4,%L1
                           MOV 0,%L4
for(int i=0; i<=3; i++)    FOR
                           CMP  %L4,3
{                          BG a SALTO1
c=(a+b)/8;                 ADD %L0,%L1,%L0
                           SRL %L0,8,%L2
	}                  BA    FOR
	                   ADD %L4,1,%L4
	                   SALTO1
return c;                  MOV  %l2,%O0   
}                        
                          

LENGUAJE DE MÁQUINA

DIRECCIONES	OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0000	        10	10000	0000100	00000	1	0000000000110	
OX0004	        10	10001	0000100	00000	1	0000000000100	
OX0008	        10	10010	0000100	00000	1	0000000000000	
OX000C	        10	10100	100101	00000	1	0000000000011	
	        OP	a	cond	OP2	disp22		
OX0010	        00	1	1010	010	0000000000000000000101		
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2/SHCNT
OX0014	        10	10000	000000	10000	0	00000000	10001
OX0018	        10	10010	100100	10000	1	00000000	01000
         	OP	a	cond	OP2	disp22		
OX001C	        00	0	1000	010	1111111111111111111011	
                OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0020          10      10100   000000  10100   1        0000000000001
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0024	        10	01000	000010	00000	0	00000000	10010
		

8. Convierta el siguiente código a lenguaje de máquina
Asiganción de registros
   X=%i0
   y=%i1
   z=%i2 
   c=%L0  
   a=%L1                                     Lenguaje ensamblador
					     EJEMPLO			     
int ejemplo(int x, int y, int z){            SUB %i0,%i1,%i3
        int a;                               SLL %i2,8,%i2
        a = x - y + z*8;                     ADD %i3,%i2,%l1
        return a + 2;                        JMPL %O7,8,%g0
}                                            ADD %L1,2,%O0

int main(){                                  MAIN
        int x = 4, y = 2, z = -128;          MOV 4,%i0
	                                     MOV 2,%i1
					     MOV -128,%i2
					     CALL EJEMPLO
        int c= 0;                            MOV 0,%L0                          
        int c = ejemplo(x,y,z);              ADD %L0,45,%O1
        return c + 45;
}

 
LENGUAJE MAQUINA

DIRECCIONES	OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0000	        10	11010	000010	11000	0	00000000	11001
	        OP	RD	OP3	RS1	i	Unusued/zero 	SHCNT
OX0004	        10	11001	100101	11001	1	00000000	01000
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0008	        10	10001	000000	11011	0	00000000	11010
OX000C	        10	00000	111000	01111	1	0000000001000	
OX0010	        10	10000	000000	10001	1	0000000000010	
OX0014	        10	11000	000010	00000	1	0000000000100	
OX0018	        10	11001	000010	00000	1	0000000000010		
OX001C	        10	11010	000010	00000	1       1111110000000
	        OP	Disp 30					
OX0020        	01	00000000000000000000000000001000			
	        OP	RD	OP3	RS1	i	Unusued/zero 	RS2
OX0024        	10	10000	000010	00000	1	0000000000000	
OX0028          10	11001	000000	10000	1	0000000101101


9.Implemente una función mul en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y lenguaje de máquina SPARCV8 que realice la multiplicación de dos enteros sin signo usando solo sumas.
Asiganción de registros
   a=%i0
   b=%i1 
   resultado=%L0  
   c=%L1
   i=%L2                                       Lenguaje Ensamblador
                                               MUL
int mul (int a,int b)                          MOV 0,%L1                      
{                                              MOV 0,%L2
                                               FOR   
int c = 0;                                     CMP %L2,%i1
                                               BG a SALTO
for  (int  i = 0;  i < b;  i++)                ADD %L1,%i1,%L1
{                                              BA     FOR 
c=c+a;                                         ADD %L2,1%l2
}                                              SALTO
return c;                                      JMPL %O7,8,%g0
}                                              MOV %L1,%O0  
                                  
					       MAIN
int main ()                                    MOV 2,%i0  
{                                              MOV 5,%i1
                                               CALL MUL 
int num=2, num2=5, resultado=0;                MOV 0,%L0
                                               MOV %L0,%O1
}
return resultado;
}

LENGUAJE MÁQUINA

DIRECCIONES	OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0000	        10	10001	000010	00000	1	0000000000000	
OX0004	        10	10010	000010	00000	1	0000000000000	
OX0008	        10	10010	010100	00000	1	00000000	11001
OX000C	        10	00000	111000	01111	1	0000000001000	
	        OP	a	cond	OP2	disp22		
OX0010	        00	1	1010	010	0000000000000000000100		
	        OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0014	        10	100101	000000	10001	0	00000000	11001
	        OP	a	cond	OP2	disp22		
OX0018	        00	0	1000	010	111111111111111111111100	
	        OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX001C	        10	10010	000000	10010	1	0000000000001	
OX0020	        10	00000	111000	01111	1	0000000001000	
OX0024	        10	00111	000010	00000	0	00000000	10001
OX0028	        10	11000	000010	00000	1	0000000000010	
OX002C	        10	11001	000010	00000	1	0000000000101	
	        OP	disp30					
OX0030	        01	000000000000000000000000000010110					
	        OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0034	        10	10000	000010	00000	1	0000000000000	
OX0038	        10	01001	000010	00000	1	00000000	10000


10.Implemente la función pot en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y lenguaje de máquina SPARCV8 que realice la potencia de dos números enteros sin signo realizando llamados a la función desarrollada en el punto 9.

Asiganción de registros
   a=%i0
   b=%i1 
   resultado=%L0  
   r=%L1
   i=%L2
   c=%L3                                       Lenguaje Ensamblador
                                               MUL
int mul (int a,int b)                          MOV 0,%L3                      
{                                              MOV 0,%L2
                                               FOR   
int c = 0;                                     CMP %L2,%i1
                                               BG a SALTO
for  (int  i = 0;  i < b;  i++)                ADD %L3,%i1.%L3
{                                              BA a FOR 
c=c+a;                                         ADD %L2,1,%l2
}                                              SALTO
return c;                                      JMPL %O7,8,%g0
}                                              MOV %L3,%O0  
                                  
					       MAIN
int main ()                                    MOV 2,%i0  
{                                              MOV 5,%i1
                                               MOV 0,%L0
int num=2;				       MOV %L0,%L1
int num2=5;				       MOV 2,%L2
int resultado=0;			       FOR
int r=num;				       CMP %L2,%io
					       BG a SALTO1
for  (int  i = 2;  i <= b;  i++)  	       CALL MUL
                                               BA    FOR 
{                                              ADD %L2,1,%L2
                                               SALTO1                                      
r=(mul (r,num));                               MOV %L1,%O1
}
return r;
}
}

LENGUAJE MÁQUINA

DIRECCIONES	OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0000	        10	10011	000010	00000	1	0000000000000	
OX0004	        10	10010	000010	00000	1	0000000000000	
OX0008	        10	10010	010100	00000	1	00000000	11001
	        OP	a	cond	OP2	disp22		
OX000C	        00	1	1010	010	0000000000000000000100		
	        OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0010	        10	10011	000000	10011	0	00000000	11000
	        OP	a	cond	OP2	disp22		
OX0014	        00	0	1000	010      1111111111111111111100	
	        OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0018	        10	10010	000000	10010	1	0000000000001	
OX001C	        10	00000	111000	01111	1	0000000001000	
OX0020	        10	01000	000010	00000	0	00000000	10011
OX0024	        10	11000	000010	00000	1	0000000000010	
OX0028	        10	11001	000010	00000	1	0000000000101	
OX002C	        10	10000	000010	00000	1	00000000000000	
OX0030	        10	10001	000010	00000	0	00000000	10000
OX0034	        10	10010	000010	00000	1	0000000000010	
OX0038	        10	10100	010100	OOOOOO	0	00000000	11000
                OP	a	cond	OP2	 disp22		
OX003C	        00	1	1010	010      0000000000000000000100	        
	
	
                OP	a	cond	OP2	disp22		
OX00034	        00	O	1000	010	111111111111111111111OO	
	        OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0038	        10	10010	000010	10010	1	0000000000001	
OX004C	        10	01001	000010	00000	0	00000000	10001

11.Implemente una función pol en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y lenguaje de máquina SPARCV8 que calcule un polinomio de grado n, en donde los coeficientes del polinomio se encuentran almacenados en un vector k de n+1 posiciones, de la siguientes forma:
		pol(x,k,n)=i=0nkixi

En donde el ki se encuentra en la posición k[i] del vector k.

12.Implemente una función fact en lenguaje de alto nivel, lenguaje de bajo nivel SPARCV8 y lenguaje de máquina SPARCV8 que calcule el factorial de un número entero sin signo

Asiganción de registros
   a=%L0
   b=%i0 
   i=%L1
                                               Lenguaje Ensamblador
                                               FACT
int fact (int b  )                             MOV 1,%L0                      
{                                              MOV 0,%i0
                                               MOV 1,%L1
					       ADD %i0,1,%i0
                                               WHILE   
int a = 1;  int i = 1;                         CMP %L1,%i0
                                               BGE a SALTO
					       CALL MUL
                                               NOP                       
{                                              ADD %L1,1,%L1
a=mul(a,i);                                    BA WHILE                                  
i++;                                           SALTO                                            
}                                              
return a;                                      
}                                                     
                                               
LENGUAJE MÁQUINA

DIRECCIONES	OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0000	        10	1000O	000010	00000	1	0000000000001	
OX0004	        10	11000	000010	00000	1	0000000000000	
OX0008	        10	10001	000010	00000	1	0000000000001
OX000C	        10	11000	000000	11000	1	000000000O001	
OX0010          10	11000	010100	00000	0	00000000	10001
	        OP	a	cond	OP2	disp22		
OX0018	        00	1	1O11	010	0000000000000000000011
	        OP	disp30					
OX001C	        01	1111111111111111111111111101101
OX0020          OP	RD	OP2	Imm22			
                00	00000	100	0000000000000000000000			
	        OP	RD	OP3	RS1	i	Unusued/zero	RS2
OX0024	        10	10001	000000	10001	1	0000000000001	
	        OP	a	cond	OP2	disp22		
OX0028	        00	0	1000	010	11111111111111111111O11			
          
